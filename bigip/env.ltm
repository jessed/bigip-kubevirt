# $HOME/Dropbox/dev/ltm_helpers

#####################################################
# Creates several command aliases, generates custom bash & tmsh prompts,
# and defines several bash functions. 
#
# Copyright, F5 Networks, 2009-2020
# Written by: Jesse Driskill
#####################################################


# use vi-mode cli
#set -o vi

# Define some environment vars
export EDITOR=vi


VERSION=$(awk '/Version/ { print $2 }' /VERSION)
mVersion=$(echo $VERSION | cut -d. -f1)
export v4="^[4567]\.*"    # BIG-IQ
export v10="^10.*"
export v11="^11.*"
export v12="^12.*"
export v13="^13.*"
export v130="^13.0.*"
export v131="^13.1.*"
export v14="^14.*"
export v15="^15.*"
export v16="^16.*"
export v11p="^1[12345].*"        # v11 or higher
export v13p="^1[345].*"          # v13 or higher
export v14p="^1[456].*"          # v14 or higher

# Aliases should be in here.
alias ll='ls -l --color=always'
alias lh='ls -lh --color=always'
alias la='ls -lA --color=always'
alias duh='du -h --max-depth=1'
alias vi=vim
alias last='last -20'
alias resource="source /shared/bin/env.ltm"

## F5-specific aliases
alias t=tmsh
alias conf=tmsh
alias quit=exit
alias slot1='ssh slot1'
alias slot2='ssh slot2'
alias slot3='ssh slot3'
alias slot4='ssh slot4'
alias slot5='ssh slot5'
alias slot6='ssh slot6'
alias slot7='ssh slot7'
alias slot8='ssh slot8'
alias ssc='tmsh save sys config'
alias bt-vips='bigtop -n -vname -delay 1 -nodes 0 -conn -delta'
alias bt-nums='bigtop -n -delay 1 -nodes 0 -conn -delta'
alias bt-vname='bigtop -n -vname -delay 1 -nodes 0 -conn'
alias bt-pkts='bigtop -n -delay 1 -nodes 0 -pkts -delta'
alias bt-nodes='bigtop -n -delay 1 -vips 0 -conn -delta'
alias listprofiles='tmsh list ltm profile | grep profile'
alias shownodes="tmsh list ltm node | awk /^ltm/'{print \$3}'"
alias listvips="tmsh list ltm virtual | awk '/^ltm/ {print \$3}'"
alias showmem='tmsh show sys tmm-info raw | grep -E "Sys|Memory|Avail|Used|--"'
alias watchmem='watch "tmsh show sys tmm-info raw | grep -E \"Sys|Memory|Avail|Used|--\""'
alias getmem="tmsh sh sys tmm-info global"
alias showintstats="tmsh reset-stats net interface; watch -n 1 'tmsh show net interface'"
alias getver='head -5 /VERSION'
alias tmctl='tmctl -w 100'
alias tmstat='tmstat summary'
alias huptmm='tmsh restart sys service tmm'
#alias failover="tmsh run sys failover standby"   # See failover() below
alias offline="tmsh run sys failover offline"
alias online="tmsh run sys failover online"
alias clearpersist="tmsh delete ltm persistence persist-records"
alias clearconns='tmsh delete sys conn all'
alias satg='tmsh show cm traffic-group | grep active'
alias showdrivers='tmctl -d blade -i tmm/device_probed'

# get the short hostname
alias ghn="tmsh list sys global-settings hostname | awk '/hostname/ { print \$2 }' | cut -d . -f 1"

alias getPvaConns="tmctl epva_connstat -s slot_id,tmm,flows_by_hardware"
alias getTmmConns="tmctl tmm_stat -Ss slot_id,cpu,client_side_traffic.cur_conns,server_side_traffic.cur_conns"
alias watchTmmConns="watch tmctl tmm_stat -Ss slot_id,cpu,client_side_traffic.cur_conns,server_side_traffic.cur_conns"
alias watchTmmConns2="watch tmctl tmm_stat -Ss client_side_traffic.cur_conns,server_side_traffic.cur_conns,cpu,slot_id"


##
## Bash functions
##

ve_sleeptime() {
  tmsh modify sys db scheduler.maxsleepduration.ltm value 1000000
  tmsh modify sys db scheduler.minsleepduration.ltm value 999999
}


failover() {
  if [[ -z "$1" ]]; then
    tmsh run sys failover standby
  else
    tmsh run sys failover standby traffic-group $1
  fi
}

# update hostname
set_hostname() {
  if [[ -z "$1" ]]; then
    echo "Must provide a (short) hostname"
    return
  else
    host=$1
  fi

  domain=$(tmsh list sys global-settings hostname  | grep hostname | sed -E 's/ +hostname (ip(-([0-9]){1,3}){4})\.(.*)/\4/')

  tmsh modify sys global-settings hostname ${host}.${domain}
}


wait_for_active() {
	while true; do
		# Send an alarm to the terminal if the ps1 prompt file contains 'active'
	  grep -iq active /var/prompt/ps1
	  if [[ $? == 0 ]]; then echo -en "\a"; fi

	  sleep 1
done
}


# display pagemem block allocation and % utilized
alias gpm='tmctl -qd blade tmm/pagemem | awk '\''{ pct = ($2 / $3) * 100; print $2,$3" ( "pct"% )" }'\'
getPagemem() {
  if [[ $VERSION =~ $v12 || $VERSION =~ $v11 || $VERSION =~ $v4 ]]; then
    tmctl -qd blade tmm/pagemem | awk '{ print $2" "$3" ( " $2/$3*100 "% )" }'
  elif [[ $VERSION =~ $v13p ]]; then
    tmctl -w 500 -qd blade page_stats | awk '{ printf("TMM %02d: %8d %8d (%3d%% )\n", $1, $2, $3, $2/$3*100 ) }'
  else
    tmctl -w 500 -qd blade page_stats | awk '{ printf("TMM %02d: %8d %8d (%3d%% )\n", $2, $3, $4, $3/$4*100 ) }'
  fi
}

# Update /var/run/config/syslog-ng.conf to stop displaying logs to usertty
no_console_logging() {
  sed -i -e 's/usertty(\"\*\")/file("\/var\/log\/console.log")/' /var/run/config/syslog-ng.conf
  tmsh restart sys service syslog-ng
}


## General LTM Functions
# push a config-sync to the device-group
sync() {
  if [ -n "$1" ]; then
    syncgroup=$1
  else
    syncgroup=$(tmsh list cm device-group one-line | awk /sync-failover/'{print $3}')
  fi
  echo "Syncing local config to $syncgroup"
  tmsh run cm config-sync to-group $syncgroup
}

# relicense the system
# either with the specified regkey (if provided) or with the previous key (from bigip.license).
relicense() {
  if [ -n "$1" ]; then
    key=$1
  else
    key=$(awk '/Reg/ { print $4 }' /config/bigip.license)
  fi
  echo "Running: SOAPLicenseClient --verbose --basekey $key"
  SOAPLicenseClient --verbose --basekey $key 
}

# tail all log files except those matched by globignore
taillogs() {
  shopt -s extglob
  GLOBIGNORE="/var/log/disk_latency.log:/var/log/restjavad-gc.log.0.current:/var/log/*gz:/var/log/disk_*log:/var/log/audit:/var/log/lastlog:/var/log/secure:/var/log/wtmp:/var/log/webui*:/var/log/wtmp*:/var/log/wccp*:/var/log/restjavad*:/var/log/tomcat:/var/log/*.1:/var/log/tmm.start:/var/log/ts:/var/log/wa:/var/log/wocplugin*:/var/log/vcmpvm.start:/var/log/rewrite*:/var/log/rpmpkgs:/var/log/sa*:/var/log/liveinstall*:/var/log/hitless*:/var/log/ecm:/var/log/omapd:/var/log/pkcs11d.debug"

  tail -n0 -f /var/log/* 2>/dev/null | unbuffer -p strings | grep -Ev "==>|icrd|127.0.0.1:6667|api-status-warning|Tcpdump"
}

# Enabled Bash VI-mode if $VIMODE=1 (sent as SSH env variable)
chk_vi_mode() {
if [[ -n "$VIMODE" && $VIMODE -eq 1 ]]; then
  set -o vi
fi
}

# Force mcpd to load from config files on one or all blades
forceload() {
  if [ -n "$1" ]; then
    echo "Performing forceload on slot $1 only"
    ssh $1 touch /service/mcpd/forceload
    ssh $1 tmsh restart sys service all
  else
    echo "Performing forceload on all active slots"
    clsh touch /service/mcpd/forceload
    clsh tmsh restart sys service all
  fi
}

get_memory() {
  totalMem=$(tmsh sh sys tmm-info global raw | awk '/Available/ {print $2}')
  usedMem=$(tmsh sh sys tmm-info global raw | awk '/Used/ {print $2}')
  pctUsed=$(calc "($usedMem / $totalMem)*100")

  printf "Used %'d out of %'d available (${pctUsed}%)\n" $usedMem $totalMem $pctUsed
}

wipenodes() {
  NODES=$(tmsh list ltm node | awk /ltm\ node/'{print $3}')
  for n in $NODES; do
    tmsh delete ltm node $n 2>/dev/null && echo "Deleting node '$n'"
  done
}

clearstats() {
  if [[ -n "$1" ]]; then
    b $1 all stats reset
  else
    tmsh reset-stats net interface 
    tmsh reset-stats ltm virtual
    tmsh reset-stats ltm pool
    tmsh reset-stats ltm node
    tmsh reset-stats ltm rule
    tmsh reset-stats sys performance all-stats
    tmsh reset-stats sys traffic
    tmsh reset-stats sys tmm

    if [[ $(tmsh show sys provision | awk '/pem/ { print $2 }') != 0 ]]; then
      #echo "(DEBUG) Clearing PEM stats"
      tmsh reset-stats pem stats subscriber
      tmsh reset-stats pem stats radius
    fi
  fi
}

showpersist() {
  nodes=$*
  if [[ -z "$nodes" ]]; then
    echo "USAGE: showpersist nodeaddr1 [nodeaddr2 ...]"
    return
  fi

  while (true); do
    tmsh show ltm persistence persist-records >/tmp/persist_records.txt
    for n in $nodes; do
      echo "$n: $(grep -c $n /tmp/persist_records.txt)"
    done
    rm /tmp/persist_records.txt
    sleep 5
  done
}

syncslots() {
  if [[ -n "$1" ]]; then
    SLOT=$1
  else
    echo "USAGE: syncslots slot<ID> (EX: syncslots slot3)"
    return
  fi

  test -f /shared/env.ltm || {
    echo "/root/.env.ltm does not exist. Exiting..."
    return
  }

  scp /shared/env.ltm ${SLOT}:/shared/env.ltm
  scp /shared/vimrc.ltm ${SLOT}:/shared/vimrc.ltm
  ssh $SLOT "ln -sf /shared/env.ltm .env.ltm"
  ssh $SLOT "ln -sf /shared/vimrc.ltm .vimrc"

  ssh $SLOT "sed -i -e \"s/^cd \/config/#cd \/config/\" .bash_profile"
  ssh $SLOT "echo \"alias src='. /shared/env.ltm'\">> .bash_profile"
  ssh $SLOT "echo \"source /shared/env.ltm\">> .bash_profile"
  ssh $SLOT "touch .hushlogin"
  ssh $SLOT "sed -i -e \"s/^clear/#clear/\" .bash_logout"
}

# Disable a cluster member (blade)
disable() {
  if [[ -z "$1" ]]; then
    echo "USAGE: disable <slot#>"
    return
  else
    echo tmsh modify sys cluster default members { $1 { disabled }}
    tmsh modify sys cluster default members { $1 { disabled }}
  fi
}

# Enable a cluster member (blade)
enable() {
  if [[ -z "$1" ]]; then
    echo "USAGE: enable <slot#>"
    return
  else
    echo tmsh modify sys cluster default members { $1 { enabled }}
    tmsh modify sys cluster default members { $1 { enabled }}
  fi
}

# aliases to remove... get rid of rm|cp|mv interactivity
cmds="mv cp rm ps"
for i in $cmds; do
  alias | grep -q $i && unalias $i 2> /dev/null
done

##
## PEM functions
##
alias pem_del_subs="tmsh delete pem sessiondb all"

pem_count_subs() {
  tmm=$(tmsh show sys tmm-info global | awk '/TMM Count/{print $3}')
  total=0

  for (( c=0; $c < $tmm; c++)); do
    num=$(tmsh show pem sessiondb view-mode count tmm $c | awk '{ print $4 }')
    printf "TMM %02d: %d\n"  $c $num

    ((total+=num))
  done
  printf "Total sessions: %d\n" $total
}

# Show provisioned and pending subscriber sessions
pem_show_sessions() {
  prov=$(tmsh show pem sessiondb session-state provisioned view-mode count | awk '{print $4}')
  pending=$(tmsh show pem sessiondb session-state provisioning-pending view-mode count | awk '{print $4}')

  printf "Provisioned: %7d\n" $prov
  printf "Pending:     %7d\n\n" $pending
}

##
## APM functions
#alias watchApmSessions='watch -n5 "sessiondump -list | wc -l"'
#alias listApmSessions='sessiondump -list | wc -l'
alias apm_watch_sessions='watch -n5 "sessiondump --list | wc -l"'
alias apm_count_sessions="echo Sessions: $(sessiondump --list | wc -l)"
alias apm_del_sessions='sessiondump --delete all'

# Changing auth settings in TMSH rewrites .bash_profile
# This restores the customizations
update_bash_profile() {
  echo -en "\n\n\nalias src='source /shared/env.ltm'\nsource /shared/env.ltm\n\nchk_vi_mode\n" >> .bash_profile
}

# Changing auth settings in TMSH rewrites .bash_profile
# This restores the customizations
update_bash_profile() {
  echo -en "\n\n\nalias src='source /shared/env.ltm'\nsource /shared/env.ltm\n\nchk_vi_mode\n" >> .bash_profile
}


# customize some tmsh options and define some aliases
mk_tmsh_aliases() {
  VERSION=$(awk '/Version/ { print $2 }' /VERSION)
  if [[ $VERSION =~ $v11p || $VERSION =~ $v4_7 ]]; then
    #v11.x
    echo "Creating aliases for LTM v11+ and BIG-IQ v4+"
    tmsh modify cli preference history-date-time enabled 2>/dev/null
    #tmsh modify cli preference keymap vi 2>/dev/null
    tmsh modify cli preference editor vi tcl-syntax-highlighting enabled
    tmsh modify cli preference prompt { host status current-folder multi-line } 2>/dev/null
    tmsh modify sys db ui.system.preferences.startscreen value virtual_servers
    tmsh modify sys db ui.system.preferences.recordsperscreen value 100
    tmsh modify sys db ui.system.preferences.advancedselection value advanced
    tmsh modify sys global-settings file-whitelist-path-prefix "{/var/local/scf} {/tmp/} {/shared/} {/config/} {/root} {/home/admin/} {/home/azadmin}" 2>/dev/null
    tmsh create cli alias shared exit         command "quit" 2>/dev/null
    tmsh create cli alias shared ssc          command "save sys config" 2>/dev/null
    tmsh create cli alias shared ping         command "run util ping" 2>/dev/null
    tmsh create cli alias shared ping6        command "run util ping6" 2>/dev/null
    tmsh create cli alias shared tcpdump      command "run util tcpdump" 2>/dev/null
    tmsh create cli alias shared clear        command "run util bash -c clear" 2>/dev/null
    tmsh create cli alias shared huptmm       command "run util bash -c 'clsh tmsh restart sys service tmm'" 2>/dev/null
    tmsh create cli alias shared failover     command "run sys failover standby" 2>/dev/null
    tmsh create cli alias shared offline      command "run sys failover offline" 2>/dev/null
    tmsh create cli alias shared online       command "run sys failover online" 2>/dev/null
    tmsh create cli alias shared sync         command "run cm config-sync to-group fo_group" 2>/dev/null
    tmsh create cli alias shared list_srv_ssl command "list ltm profile server-ssl" 2>/dev/null
    tmsh create cli alias shared list_clt_ssl command "list ltm profile client-ssl" 2>/dev/null
    tmsh create cli alias shared clearconns   command "delete sys conn all" 2>/dev/null
    #tmsh create cli alias shared imish        command "run util imish" 2>/dev/null
  else
    #v10.2.x
    echo "Creating aliases for LTM v10.x"
    tmsh modify cli preference editor vi
    tmsh modify cli preference prompt { host status multi-line }
    tmsh create cli alias ping    command "run util ping" 2>/dev/null
    tmsh create cli alias ping6   command "run util ping6" 2>/dev/null
    tmsh create cli alias tcpdump command "run util tcpdump" 2>/dev/null
    tmsh create cli alias clear   command "run util bash -c clear" 2>/dev/null
    tmsh create cli alias exit    command "quit" 2>/dev/null
    tmsh create cli alias huptmm  command "run util bash -c clsh tmsh restart sys service tmm" 2>/dev/null
    tmsh create cli alias ssc     command "save sys config" 2>/dev/null
    tmsh create cli alias showtcp command "show sys connection protocol tcp"
    tmsh modify cli global-settings service number
  fi

  tmsh save sys config > /dev/null
}

# Configure basic ltm settings
# $2 - hostname
# $1 - (optional) domain (default: cpt.gtp.f5net.com)
mk_default() {
  if [[ -n $1 ]]; then
    name=$1
  else
    # get existing hostname
    name=$(tmsh list sys global-settings | awk '/hostname/ { print $2}' | cut -d\. -f1)
    #echo -n "Please enter the hostname (domain is $domain): "
    #read name
  fi

  if [[ -n $2 ]]; then
    domain="cpt.gtp.f5net.com"
  else
    # get existing domain
    domain=$(tmsh list sys global-settings | awk '/hostname/ { print $2}' | cut -d\. -f1 --complement)
  fi

  if [[ -z $domain ]]; then
    # domain still undefined, use compute.internal
    domain="compute.local"
  fi

  echo -e "Using hostname:  ${name}.${domain}\n"
  for (( c=5 ; $c > 0 ; c-- )); do
    echo -en "\rIf this is not correct you have \033[0;32m$c\033[0m seconds to cancel (ctrl+c)"
    sleep 1
  done
  echo -e "\nBeginning..."

  tmsh modify sys global-settings hostname ${name}.${domain}
  tmsh modify sys global-settings gui-setup disabled
  tmsh modify sys dns name-servers add { 4.2.2.2 8.8.8.8 }
  tmsh modify sys dns search add { cpt.gtp.f5net.com }
  tmsh modify sys ntp servers add { tick.ucla.edu } timezone "US/Pacific"
  tmsh modify sys snmp allowed-addresses add { ALL }
  tmsh modify sys httpd auth-pam-idle-timeout 86400
  tmsh modify sys db bigpipe.displayservicenames value false
  tmsh modify sys db platform.powersupplymonitor value disable
  tmsh modify sys db users.strictpasswords value disable
  tmsh modify sys syslog console-log disabled
  tmsh modify sys db log.tcpdump.level value error

  # disable miserable password policy in v14 and higher
  #if [[ $VERSION =~ $v14p ]]; then
  if (( $mVersion >= 14 )); then
    tmsh modify auth password-policy policy-enforcement disabled
    tmsh modify auth user admin password admin
    local rootpass='$1$8kIUIrbb$b7FOEXTrKOiOgJ1w0T78F\/'			# default
    #local adminpass='$1$VFlFWR0F$iIy0wXSbTl4EpmMYPnX1A.'			# admin

    sed -i -r 's/^(root):[^:]*:(.*)$/\1:'"$rootpass"':\2/' /etc/shadow
  fi

  tmsh save sys config > /dev/null
}

cloud_default() {
  domain=$(cat /var/prompt/fqdn | sed 's/'$(cat /var/prompt/hostname)'\.//')
  if [[ $domain =~ "cloudapp.azure.com" ]]; then
    domain="westus2.cloudapp.azure.com"
  elif [[ $domain =~ "compute.internal" ]]; then
    #domain="us-west-2.aws.com"
    domain="aws.compute.internal"
  elif [[ $domain =~ "f5-gcs-4261-sales-na-ne" ]]; then
    domain=$(tmsh list sys global-settings hostname | awk '/hostname/ {print $2}' | sed 's/^\w*\.//')
  else
    echo "Domain not recognized, using 'compute.internal'"
    domain="compute.internal"
  fi
  if [[ -n $1 ]]; then
    name=$1
    echo "Setting hostname to: ${name}.${domain}"
    tmsh modify sys global-settings hostname ${name}.${domain}

    # Hostname is overridden by AWS DHCP response unless dhcp option 'host-name' is deleted
    tmsh modify sys management-dhcp sys-mgmt-dhcp-config request-options delete { host-name }
  fi

  tmsh modify sys global-settings gui-setup disabled
  tmsh modify sys ntp servers add { tick.ucla.edu } timezone "US/Pacific"
  tmsh modify sys snmp allowed-addresses add { ALL }					# Should probably change
  tmsh modify sys httpd auth-pam-idle-timeout 86400
  tmsh modify sys db bigpipe.displayservicenames value false
  tmsh modify sys db users.strictpasswords value disable
  tmsh modify sys db systemauth.disablerootlogin value false
  tmsh modify sys syslog console-log disabled
  # modify sshd to accept the 'VIMODE' environment variable
  tmsh modify sys sshd include "AcceptEnv VIMODE"
  tmsh modify sys db log.tcpdump.level value error

  # disable miserable password policy in v14 and higher
	#if [[ $VERSION =~ $v14 || $VERSION =~ $v15 || $VERSION =~ $v16 ]]; then
	if (( $mVersion >= 14 )); then
    tmsh modify auth password-policy policy-enforcement disabled
    tmsh modify auth user admin password admin
  fi

  # Change admin password to the defaults (root/default, admin/admin)
  # bash-interpreted characters must be escaped
  local adminpass='\$6\$vDHFai9i\$pljuKURtKQ0lsqGi0NElePTHr4UZi8bPwe1clBoD5pDCKjyo.eUUyrHJxztfi2KntnvIwNqtDUUJ7Dolb0HkM.'
  local rootpass='\$6\$pOD\/N9TK\$RKWO4ogO3Dt9cV7EGYMkO7URBUU6lKNb6feOP6q3ZhSTq29rM2jrtrjmcEt6iBCjo23mT5RDi.W1ROD3v.PAr\/'
  # new pass: NeverWillYouEver!
  local newpass='\$6\$ZEYxkkMU\$nTinAyidAPWV9kyuKHcgkssYcs2zylWlCrDOpZMN11K1HAIBgulc3oJcjbtgWMK2PacgFvJq\/wi.dDizSPucA\/'
  #sed -i -r 's/^(admin):[^:]*:(.*)$/\1:'"$newpass"':\2/' /etc/shadow
  #sed -i -r 's/^(root):[^:]*:(.*)$/\1:'"$newpass"':\2/' /etc/shadow
  
	echo 'set -o vi' >> ~/.bash_profile

  tmsh save sys config > /dev/null
}

update_admin_pass() {
  # Change admin password to 'admin'
  local adminpass='\$6\$vDHFai9i\$pljuKURtKQ0lsqGi0NElePTHr4UZi8bPwe1clBoD5pDCKjyo.eUUyrHJxztfi2KntnvIwNqtDUUJ7Dolb0HkM.'
  sed -i -r 's/^(admin):[^:]*:(.*)$/\1:'"$adminpass"':\2/' /etc/shadow
  tmsh save sys config > /dev/null
}

watchhost() {
  go=1
  while [ $go -eq 1 ]; do
    ping -c1 -W 1 $1 >/dev/null 2>&1
    if [ $? -eq 0 ]; then
      #echo "ping succeeded, sleeping"
      sleep 1
    else
      #echo "ping failed, setting go = 0"
      echo "No echo response, entering notification phase"
      go=0
      sleep 1
    fi
  done

  while [ 1 ]; do
    ping -c1 $1 >/dev/null 2>&1
    if [ $? -ne 0 ]; then
      sleep 1
    else
      echo -e "$1 is up\a"
      sleep 1
    fi
  done
}

# Clear alerts from LCD
clear_alerts() {
  hardwareType=`tmsh show sys hardware | grep Type | tail -n1 | awk '{print $2}'`
  if [[ $hardwareType == A* ]] ; then
    echo "Clearing alerts on $HOSTNAME VIPRION Type: $hardwareType"
    for i in 0 1 2 3 4; do
      for j in 0 1; do
        lcdwarn -c "${i}" "${j}"
      done
    done
  else
    echo "Clearing alerts on $HOSTNAME Non-VIPRION Type: $hardwareType"
    for i in 0 1 2 3 4 5; do
      lcdwarn -c "${i}" 0
    done
  fi
}


### define the custom prompt
PROMPT_DIRTRIM=4
#TITLE='\[\e]0;\h\a'
#BLINK="\[\e[5m\]"
#CLR="\[\e[0m\]"
#GREEN="\[\e[0;32m\]"
#RED="\[\e[0;31m\]"
#BLUE="\[\e[0;34m\]"
#CYAN="\[\e[0;36m\]"
#PURPLE="\[\e[0;35m\]"
#BROWN="\[\e[0;33m\]"
#LTBLUE="\[\e[1;34m\]"
#LTGREEN="\[\e[1;32m\]"
#LTRED="\[\e[1;31m\]"
#LTCYAN="\[\e[1;36m\]"
#YELLOW="\[\e[1;33m\]"
#WHITE="\[\e[1;37m\]"

TITLE='\e]0;\h\a'
BLINK="\e[5m"
CLR="\e[0m"
GREEN="\e[0;32m"
RED="\e[0;31m"
BLUE="\e[0;34m"
CYAN="\e[0;36m"
PURPLE="\e[0;35m"
BROWN="\e[0;33m"
LTBLUE="\e[1;34m"
LTGREEN="\e[1;32m"
LTRED="\e[1;31m"
LTCYAN="\e[1;36m"
YELLOW="\e[1;33m"
WHITE="\e[1;37m"


export PLATFORM=$(awk 'BEGIN{FS="=" } /platform/ {print $2}' /PLATFORM)

# Viprion does a couple things differently than appliances.
# We need to know which we are working with.
case $PLATFORM in
  A[0-9]* ) export VIPRION=1 ;;
  Z101    ) export VIPRION=2 ;;
  *       ) export VIPRION=0 ;;
esac

# enable DEBUG mode
export DEBUG=0

#custom prompt
mk_prompt () {
  # Get failover state and sync status
  if [[ -f /var/prompt/cmiSyncStatus ]];  then read SYNC < /var/prompt/cmiSyncStatus; else SYNC="Unknown"; fi
  if [[ -f /var/prompt/ps1 ]];            then read FO < /var/prompt/ps1; else FO="Unknown"; fi

  goodFO="(Active|Standby|Standalone|Disconnected|In Sync)"
  badFO="(ForcedOffline|Offline|INOPERATIVE|REBOOT REQUIRED|FailsafeFault)"
  single="(Standalone)"
  syncStatus="(In Sync|Standalone|Changes Pending|Awaiting Initial Sync|Not All Devices Synced|Changes Pending)"

  # Determine whether this is a redundant or standalone system
  if [[ "$SYNC" =~ $single ]]; then STANDALONE=${BASH_REMATCH[0]}; fi

  if  [[ $VIPRION -eq 0 ]]; then                # Appliance
    if [[ "$FO" =~ $goodFO ]]; then FO=${BASH_REMATCH[1]}; fi

    if [[ -z "$STANDALONE" ]]; then             # Redundant
      (($DEBUG)) && echo "Redundant Appliance"
      if [[ "$FO" =~ $goodFO ]]; then           # Good FO status
        if [[ "$SYNC" =~ $syncStatus ]]; then   # Known sync status
          COLOR="${TITLE}${GREEN}"
          PS1="${COLOR}${FO}, ${SYNC}${CLR}\n\h:\w >"
        else                                    # Bad/unknown sync status
          (($DEBUG)) && echo "Code a1"
          COLOR="${TITLE}${LTCYAN}"
          PS1="${COLOR}${FO}, ${SYNC}${CLR}\n\h:\w >"
        fi
      elif [[ "$FO" =~ $badFO ]]; then          # Bad FO status
        (($DEBUG)) && echo "Code a2"
        COLOR="${TITLE}${RED}"
        PS1="${COLOR}${FO}, ${SYNC}${CLR}\n\h:\w >"
      else                                      # Unknown FO status
        (($DEBUG)) && echo "Code a3"
        COLOR="${TITLE}${YELLOW}"
        PS1="${COLOR}${FO}, ${SYNC} (Unknown failover state: FO: ${FO}, SYNC: ${SYNC})${CLR}\n\h:\w >"
      fi
    else                                        # Standalone appliance
      (($DEBUG)) && echo "Standalone Appliance"
      if [[ "$FO" =~ $goodFO ]]; then           # Good FO status
        (($DEBUG)) && echo "Code a4"
        COLOR="${TITLE}${GREEN}"
        PS1="${COLOR}${FO}, ${SYNC}${CLR}\n\h:\w >"
      else                                      # Bad or unknown FO status
        (($DEBUG)) && echo "Code a5"
        echo "Unknown FO state: $FO, $STANDALONE"
        PS1="${TITLE}${RED}($FO), ${SYNC}${CLR}\n\h:\w >";
      fi
    fi

  elif [[ $VIPRION -eq 1 ]]; then # viprion platform
    if [ -f /SLOT ]; then read SLOT < /SLOT; else SLOT=0; fi

    viprionStatus="\/S([12345678])-([[:alpha:]]*)?-([PS]):([[:alpha:]]*|[[:alpha:]]* [[:alpha:]]*)?:?([[:alpha:]]*)?"
    if [[ "$FO" =~ $viprionStatus ]]; then
      SLOT=${BASH_REMATCH[1]}
      colorState=${BASH_REMATCH[2]}
      cState=${BASH_REMATCH[3]}
      mgmtState=${BASH_REMATCH[4]}
      FO=${BASH_REMATCH[5]}

      # If the licensed has expired or the system is unlicensed, set the prompt to that and return
      if [[ $mgmtState =~ "LICENSE EXPIRED" ]]; then
        PS1="${TITLE}${GREEN}Slot ${SLOT} ${RED}${BLINK}${mgmtState}${CLR}\n\h:\w >"
        return
      fi

      # if /var/prompt/ps1 doesn't contain the FO status, get it from $SYNC (/var/prompt/cmiSyncStatus)
      if [[ -z $FO ]]; then FO=$SYNC; fi

      (($DEBUG)) && echo "DEBUG: slot:$SLOT, color:$colorState, cState:$cState, mgmtState:$mgmtState, fo:'$FO'"

      # Base prompt of failover state
      if [[ "$FO" =~ $goodFO ]]; then
        if [[ "$SYNC" =~ $syncStatus ]]; then   # Known sync status
          (($DEBUG)) && echo "Code vpr1"
          COLOR="${TITLE}${GREEN}"
          PS1="${COLOR}Slot ${SLOT}, (${FO}) ${mgmtState} ${CLR}\n\h:\w >"
        else                                    # Unknown sync status
          (($DEBUG)) && echo "Code vpr2"
          COLOR="${TITLE}${CYAN}"
          PS1="${COLOR}Slot ${SLOT}, (${FO}) ${mgmtState} ${CLR}\n\h:\w >"
        fi
      elif [[ $FO =~ $badFO ]]; then            # Bad FO state
        (($DEBUG)) && echo "Code vpr3"
        COLOR="${TITLE}${RED}"
        PS1="${COLOR}Slot ${SLOT}, ${FO}${CLR}\n\h:\w >"
      fi
    else                                        # Not in Active or Standby FO state
      (($DEBUG)) && echo "Code vpr4"
      COLOR="${TITLE}${RED}"
      PS1="${COLOR}Slot ${SLOT}, (Failover unknown: ${FO}), ${SYNC}${CLR}\n\h:\w >"
    fi

  elif  [[ $VIPRION -eq 2 ]]; then              # vCMP guest on VIPRION
    if [[ "$FO" =~ $goodFO ]]; then FO=${BASH_REMATCH[1]}; fi

    if [[ -z "$STANDALONE" ]]; then # Redundant vCMP
      (($DEBUG)) && echo "Redundant vCMP"
      if [[ "$FO" =~ $goodFO ]]; then
        if [[ "$SYNC" =~ $syncStatus ]]; then
          (($DEBUG)) && echo "Code vcmp1"
          PS1="${TITLE}${GREEN}${FO}, ${SYNC}${CLR}\n\h:\w >"
        else
          (($DEBUG)) && echo "Code vcmp2"
          PS1="${TITLE}${LTCYAN}${FO}, ${SYNC}${CLR}\n\h:\w >"
        fi
      else                                      # Unknown Failover state ($FO)
        (($DEBUG)) && echo "Code vcmp3"
        PS1="${TITLE}${YELLOW}Slot ${FO}, ${SYNC} (Unknown failover state: ${FO})${CLR}\n\h:\w >"
      fi
    else # Standalone vCMP
      (($DEBUG)) && echo "Standalone vCMP"
      if [[ "$FO" =~ $goodFO ]]; then
        FO=${BASH_REMATCH[1]}
        (($DEBUG)) && echo "$FO, $FO"

        if [[ "$FO" =~ $goodFO ]]; then
          (($DEBUG)) && echo "Code 7"
          PS1="${TITLE}${GREEN}${FO}, ${SYNC}${CLR}\n\h:\w >"
        fi
      else # System is not in Active or Standby
        (($DEBUG)) && echo "Code 8"
        echo "cState: $cState, FO: $FO, STANDALONE: $STANDALONE"
        PS1="${TITLE}${RED}($FO), ${SYNC}${CLR}\n\h:\w >";
      fi
    fi

  else  # UNKNOWN platform type
    (($DEBUG)) && echo "Code 100"
    echo "(unknown platform) cState: $cState, FO: $FO, STANDALONE: $STANDALONE"
    PS1="${TITLE}${RED}($FO), ${SYNC}${CLR}\n\h:\w >";
  fi
}
export PROMPT_COMMAND=mk_prompt



# vim: set syntax=sh tabstop=2 expandtab:
