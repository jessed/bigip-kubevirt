#cloud-config

chpasswd:
  list: |
    root:${rootPass}
    admin:${adminPass}
  expire: False

write_files:
  - path: /config/user_alert.conf
    permissions: 0644
    encoding: b64
    content: ${userAlert}

  - path: /shared/rebind_eth0_driver
    permissions: 0755
    encoding: b64
    content: ${rebindNicDriver}

  #- path: /config/tmm_init.tcl
  #  permissions: 0644
  #  content: |
  #    device driver vendor_dev 15b3:101e mlxvf5
  #    #ndal rx_devq_sz 512 15b3:101e
  #    #ndal tx_devq_sz 512 15b3:101e
  #    #device driver vendor_dev 15b3:101e xnet

  - path: /shared/reload_license.bash
    permissions: 0755
    encoding: b64
    content: ${reloadLicense}

  - path: /shared/cloud_init.bash
    permissions: 0755
    content: |
      #! /bin/bash

      DEBUG=1                        # 1 = debugging enabled, 0 = debugging disabled
      ciDir="/shared/cloud_init"
      netCfg="$ciDir/network-config"


      # source wait_bigip_ready* functions
      source /usr/lib/bigstart/bigip-ready-functions

      # Declare bash arrays for various configuration elements
      declare -A config
      declare -A mac_map
      declare -A interfaces

      # used to generate the (unused) vlan tag
      vlanStart=4000
      ciDisk="/dev/vdb"

      # error condition tracking
      ciDiskErr=0
      netconfigErr=0

      # Hardcode config elements to work-around the lack of config-maps in AODS
      # System-wide variables
      config[hostname]="${hostname}"
      config[dnsServers]="${dnsServers}"
      config[ntpServers]="${ntpServers}"
      config[ntpTimezone]="${ntpTimezone}"
      config[strictpasswords]="${strictPasswords}"
      config[sshPort]="${sshPort}"
      config[regKey]="${regKey}"
      config[pubKey]="${pubKey_b64}"
      config[envFile]="${envFile}"
      config[proxyProtocol]="${proxyProtocol}"
      config[proxyAddr]="${proxyAddr}"
      config[proxyPort]="${proxyPort}"
      # Management (CSN) networking
      config[mgmtAddr]="${csnV4addr}"
      config[mgmtCidr]="${csnV4cidr}"
      config[mgmtGtwy]="${csnV4gtwy}"
      # OAM networking
      config[dataVlanName1]="${oamName}"
      config[dataVlanAddr1]="${oamV4addr}"
      config[dataVlanCidr1]="${oamV4cidr}"
      config[dataVlanTag1]="${oamVlanTag}"
      config[dataVlanMac1]="${oamMacAddr}"
      # Client networking
      config[dataVlanName2]="${clientName}"
      config[dataVlanAddr2]="${clientV4addr}"
      config[dataVlanCidr2]="${clientV4cidr}"
      config[dataVlanTag2]="${clientVlanTag}"
      config[dataVlanMac2]="${clientMacAddr}"
      # Server networking
      config[dataVlanName3]="${serverName}"
      config[dataVlanAddr3]="${serverV4addr}"
      config[dataVlanCidr3]="${serverV4cidr}"
      config[dataVlanTag3]="${serverVlanTag}"
      config[dataVlanMac3]="${serverMacAddr}"
      config[dataGtwy]="${dataGtwy}"


      ###
      ### Functions
      ###

      # Craete cloud-init info location
      function create_ci_dir() {
        # Create cloud_init dir, link to /root/, and output variable values
        if [[ ! -d $ciDir ]]; then
          mkdir /shared/cloud_init
        else
          rm -rf $ciDir/*
        fi

        # copy this script to cloud_init location for troubleshooting
        cp $0 $ciDir/cloud_init.bash && chmod 755 $ciDir/cloud_init.bash
      }

      # Configure system global settings
      function update_global() {
        # Disable DHCP if a management-ip was provided in config-map
        if [[ -n ${config[mgmtAddr]} ]]; then
          echo "($(date +%T)) Found management-ip, disabling management DHCP"
          tmsh modify sys global-settings mgmt-dhcp disabled
        fi

        echo "($(date +%T)) Setting hostname to '${config[hostname]}'"
        tmsh modify sys global-settings hostname ${config[hostname]}
        echo "($(date +%T)) Setting DNS servers to ${config[dnsServers]}"
        tmsh modify sys dns name-servers replace-all-with { ${config[dnsServers]} }
        echo "($(date +%T)) Setting timezone to ${config[ntpTimezone]} and NTP servers to ${config[ntpServers]}"
        tmsh modify sys ntp servers replace-all-with { ${config[ntpServers]} } timezone ${config[ntpTimezone]}
        echo "($(date +%T)) Updating scp whitelist to include /shared"
        echo "/shared" >> /config/ssh/scp.whitelist
        tmsh restart sys service sshd

        # If defined, configure proxy host and port 
        if [[ -n ${config[proxyAddr]} ]]; then
          echo "($(date +%T)) Setting sys db proxy.host to ${config[proxyAddr]}"
          tmsh modify sys db proxy.host value ${config[proxyAddr]}
        fi
        if [[ -n ${config[proxyPort]} ]]; then
          echo "($(date +%T)) Setting sys db proxy.port to ${config[proxyPort]}"
          tmsh modify sys db proxy.port value ${config[proxyPort]}
        fi

      # If ssh port is not 22, update to the defined value
      if [[ ${config[sshPort]} != 22 ]]; then tmsh modify sys ssh port ${config[sshPort]}; fi


        if [[ ${config[strictpasswords]} == "disable" ]]; then
          echo "($(date +%T)) Disabling strict password policy"
          tmsh modify sys db users.strictpasswords value ${config[strictpasswords]}
        fi
      }

      # Add $sshKey to admin and root
      function inject_pubkey() {
        if [[ -n ${config[pubKey]} ]]; then
          pubKey=$(printf "%s" ${config[pubKey]} | base64 -d)
          echo "($(date +%T)) Found ssh public key; adding to authorized_keys"
          echo "($(date +%T)) Key: $pubKey"
          echo "$pubKey" >> /var/ssh/root/authorized_keys
          #echo "$pubKey" >> /home/admin/.ssh/authorized_keys
        else
          echo "($(date +%T)) Skipping SSH public key insertion, config[pubKey] not defined"
        fi
      }

      # Assign management-ip based on network-data or config array
      function assign_mgmt_addr() {
        if [[ -f $netCfg ]]; then
          # AODS uses a /20 for the CSN, but BIG-IP only permits link-local addresses with /16
          mgmtIp=$(awk '/mgmt/ { print $4 }' $netCfg | cut -d/ -f1)
          mgmtAddr="$mgmtIp/16"
        else
          mgmtAddr="${config[mgmtAddr]}/${config[mgmtCidr]}"
        fi

        if [[ -z $mgmtAddr ]]; then
          echo "($(date +%T)) ERROR: management-ip not found, unable to assign management-ip"
          return
        fi

        # Disable DHCP for management-ip
        echo "($(date +%T)) Disabling management DHCP"
        tmsh modify sys global-settings mgmt-dhcp disabled

        # Assign management addr
        echo "($(date +%T)) Deleting default/dhcp management-ip"
        tmsh delete sys management-ip all
        echo "($(date +%T)) Setting management-ip to $mgmtAddr"
        tmsh create sys management-ip $mgmtAddr
      }

      # get network-config
      function get_netconfig() {
        echo "($(date +%T)) Creating /tmp/netconfig to mount cloud-init ($ciDisk)"
        mkdir /tmp/netconfig
        echo "($(date +%T)) Mounting $ciDisk to /tmp/netconfig"
        mount $ciDisk /tmp/netconfig

        # make sure the disk mounted successfully
        if [[ $? != 0 ]]; then
          echo "($(date +%T)) ERROR: Failed to mount cloud-init drive '$ciDisk' (ciDiskErr = 1)"
          ciDiskErr=1
          netconfigErr=1
          return
        fi

        echo "($(date +%T)) Copying /tmp/netconfig/network-config to $netCfg"
        cp /tmp/netconfig/network-config $netCfg
        test -f /tmp/netconfig/network-config && cp /tmp/netconfig/network-config $netCfg || {
          echo "($(date +%T)) ERROR: /tmp/netconfig/network-config file not found (netconfigErr = 1)"
          netconfigErr=1
        }

        echo "($(date +%T)) Unmounting /tmp/netconfig/"
        umount /tmp/netconfig
        echo "($(date +%T)) Removing /tmp/netconfig"
        rmdir /tmp/netconfig
      }

      # Configure data-plane networking from network-config file
      function create_dataplane_from_netconfig() {
        while read line; do
          # extract the interface, vlan, and ip address
          read -r iface vlanName ipAddr <<< $line

          # skip the mgmt interface
          [[ $iface =~ "mgmt" ]] && continue
          # skip any network routes
          [[ $iface =~ "route" ]] && continue

          # IPv6 networking has not yet been enabled, so skip entries with an empty ipAddr variable
          [[ -z $ipAddr ]] && continue

          # Generate the vlan tag
          num=$(echo $iface | cut -d. -f2)
          vlanTag=$((vlanStart + $num))

          # Create the vlan if the interface is present
          tmsh show net interface $iface >/dev/null
          if [[ $? == 0 ]]; then
            tmsh list net vlan $vlanName >/dev/null 2>&1
            if [[ $? != 0 ]]; then
              # vlan does not exist, so create it
              echo "($(date +%T)) Creating vlan '$vlanName' (tag: $vlanTag) and assigning interface '$iface'"
              test $DEBUG && echo "tmsh create net vlan $vlanName tag $vlanTag interfaces add { $iface { untagged }}"
              tmsh create net vlan $vlanName tag $vlanTag interfaces add { $iface { untagged }}
            fi

            # Create the self-ip
            echo "($(date +%T)) Creating self-ip $ipAddr in vlan $vlanName"
            test $DEBUG && echo "tmsh create net self $ipAddr vlan $vlanName"
            tmsh create net self $ipAddr vlan $vlanName

            # Confirm that the address was created successfully
            if [[ $? != 0 ]]; then
              echo "($(date +%T)) Error: Creation of self-ip $ipAddr in vlan $vlanName failed."
            fi

            # Enable management access to first vlan
            if [[ $iface == "1.1" ]]; then
              echo "($(date +%T)) Enabling managmenet access to $ipAddr on vlan $vlanName"
              test $DEBUG && echo "tmsh modify net self $ipAddr allow-service add { tcp:22 tcp:443 }"
              tmsh modify net self $ipAddr allow-service add { tcp:22 tcp:443 }
            fi
          else
            echo "($(date +%T)) ERROR: Interface '$iface' does not exist"
          fi
        done < <(awk '/^#/ { print $2,$3,$4 }' $netCfg)
      }


      # Assign data-plane gateway
      function create_default_route() {
        # if $netCfg file is present, attempt to assign the default route from it
        if [[ -f $netCfg ]]; then
          echo "($(date +%T)) Creating default route from $netCfg"
          read -r name gateway < <(awk '/0.0.0.0|default/ { print $3,$4 }' $netCfg)
          if [[ $name == "0.0.0.0" ]]; then name="$name/0"; fi

          if [[ -n $name && -n $gateway ]]; then
            echo "($(date +%T)) Route found in $netCfg"
            [[ $DEBUG ]] && echo "tmsh create net route $name gw $gateway"
            tmsh create net route $name gw $gateway
          else
            echo "($(date +%T)) Default route not found in $netCfg, checking for config array"

            if [[ -n ${config[dataGtwy]} ]]; then
              echo "($(date +%T)) Creating default route"
              test $DEBUG && echo "tmsh create net route default gw ${config[dataGtwy]}"
              tmsh create net route default gw ${config[dataGtwy]}
            fi
          fi
        fi
      }
      
      ## TODO: Remove 
      ## Bind eth0 to mlx5_core driver
      ## This is reset every time TMM is restarted, so we will need a better long-term solution
      function bind_mgmt_interface() {
        # Identify first interface PCI address
        echo "($(date +%T)) Finding first network interface for use with CSN"
        pci_addr="0000:$(lspci | grep -m1 Mellanox | awk '{ print $1 }')"
        echo "($(date +%T)) Found PCI addrss $pci_addr"
        
        # Add driver override entry
        echo "($(date +%T)) Overriding driver for pci: $pci_addr"
        [[ $DEBUG ]] && echo "($(date +%T)) echo mlx5_core > /sys/bus/pci/devices/\${pci_addr}/driver_override"
        echo mlx5_core > /sys/bus/pci/devices/\${pci_addr}/driver_override
        
        # forcibly probe that PCI slot
        echo "($(date +%T)) Probing pci address: $pci_addr"
        [[ $DEBUG ]] && echo "($(date +%T)) echo $pci_addr > /sys/bus/pci/drivers/drivers_probe"
        echo $pci_addr > /sys/bus/pci/drivers_probe
        
        # Add eth0 to mgmt bridge
        echo "($(date +%T)) Adding interface eth0 to mgmt bridge"
        [[ $DEBUG ]] && echo "($(date +%T)) brctl addif mgmt eth0"
        brctl addif mgmt eth0
        
        # Enable interface
        echo "($(date +%T)) Enabling interface eth0"
        [[ $DEBUG ]] && echo "($(date +%T)) ifconfig eth0 up"
        ifconfig eth0 up
      }

      # Create cli environment file, if defined
      function mk_cli_env() {
        if [[ -n ${config[envFile]} ]]; then
          echo "($(date +%T)) Environment file defined, writing to /shared/env.ltm"
          echo ${config[envFile]} | base64 -d > /shared/env.ltm

          homes="/root /home/admin"

          for home in $homes; do
            echo "source /shared/env.ltm" >> $home/.bash_profile
            sed -i  's!^cd /config!#cd /config!' $home/.bash_profile
          done
        else
          echo "($(date +%T)) Environment file undefined, skipping environment customization"
        fi
      }

      # Restart chmand service - necessary for get_dossier to work (at least for now)
      function restart_chmand() {
        echo "($(date +%T)) Restarting chmand"
        tmsh restart sys service chmand
        sleep 5
      }

      # Apply license
      function activate_license() {
        if [[ -n ${config[regKey]} ]]; then
          echo "($(date +%T)) Attempting to activate license: ${config[regKey]}"
          test $DEBUG && echo "Running SOAPLicenseClient --basekey ${config[regKey]}"
          SOAPLicenseClient --verbose --basekey ${config[regKey]}
          if [[ $? != 0 ]]; then
            echo "($(date +%T)) Error: License activation failed using regkey: ${config[regKey]}"
          fi
        else
          echo "($(date +%T)) No Registration key defined, skipping license activation"
        fi
      }

      # update /config/startup fild
      function update_startup() {
        echo "($(date +%T)) Updating /config/startup to call /shared/reload_license.bash"
        chmod +w /config/startup
        echo 'shared/reload_license.bash' >> /config/startup
      }


      ###
      ### Main
      ###

      # Wait for bigip to be ready to execute
      echo "($(date +%T)) Waiting for BIG-IP to reach ready state"
      wait_bigip_ready
      echo "($(date +%T)) wait_bigip_ready() returned, proceeding with configuration"

      # Create to store cloud-init components
      create_ci_dir

      # Get data-plane network configuration
      get_netconfig
      
      update_global
      assign_mgmt_addr
      inject_pubkey
      mk_cli_env

      # Create the data-plane networking
      create_dataplane_from_netconfig

      # Create the default route
      create_default_route

      # Save configuration
      echo "($(date +%T)) Saving configuration"
      tmsh save sys config >/dev/null 2>&1

      # run /shared/rebind_eth0_driver to enable mgmt port
      echo "($(date +%T)) Rebinding eth0 to mlx5_core and restarting chmand"
      /shared/rebind_eth0_driver

      update_startup

      # Activate license
      #activate_license

runcmd:
  - /shared/cloud_init.bash &

# vim: set syntax=bash tabstop=2 expandtab:
